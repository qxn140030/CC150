Question: Write code to partition a linked list around a value x, such that all nodes less than x come before all nodes greater than or
          equal to x. If x is contained within the list, the values of x only need to be after the elements less than x. The partition
          element x can appear anywhere in the "right partition"; it does not need to appear between the left and right partitions.
          
Example: Input:  3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1 [partition = 5]
         Output: 3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8
         
public ListNode partition(ListNode head, int x) {
  ListNode leftDummy = new ListNode(0);
  ListNode leftTail = leftDummy;
  ListNode rightDummy = new ListNode(0);
  ListNode rightTail = rightDummy;
  while (head != null) {
    if (head.val < x) {
      leftTail.next = head;
      leftTail = leftTail.next;
    } else {
      rightTail.next = head;
      rightTail = rightTail.next;
    }
    head = head.next;
  }
  leftTail.next = rightDummy.next;
  rightTail.next = null;
  return leftDummy.next;
}

If we don't care about making the elements of the list "stable", we can rearrange elements by growing the list at the head and tail.
public ListNode partition(ListNode head, int x) {
  ListNode dummy = head;
  ListNode tail = head;
  while (head != null) {
    ListNode next = head.next;
    // insert node at head.
    if (head.val < x) {
      head.next = dummy;
      dummy = head;
    } else {
      // insert node at tail.
      tail.next = head;
      tail = head;
    }
    head = next;
  }
  tail.next = null;
  return dummy;
}
