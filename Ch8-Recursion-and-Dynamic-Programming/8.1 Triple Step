A child is running up a staircase with n steps and can hop either 1 step, 2 steps, or 3 steps at a time. Implement a method
to count how many possible ways the child can run up the stairs.

Solution 1: Brute force. Time complexity: O(n^3).
int countWays(int n) {
    if (n < 0) {
        return 0;
    }
    if (n == 0) {       // a lot easier to define it as 1.
        return 1;
    }
    return countWays(n - 1) + countWays(n - 2) + countWays(n - 3);
}

Solution 2: Memoization. the number of ways will quickly overflow the bounds of an integer. 
n = 37 overflowed. Using long will delay, but not completely solve this issue. BigInteger class.
int countWays(int n) {
    if (n < 0) {
        return 0;
    }
    int[] dp = new int[n + 1];
    dp[0] = 1;
    dp[1] = 1;
    dp[2] = 2;
    for (int i = 3; i <= n; i++) {
        dp[i] = dp[i - 3] + dp[i - 2] + dp[i - 1];
    }
    return dp[n];
}
