T1 and T2 are two very large binary trees, with T1 much bigger than T2. Create an algorithm to determine if T2 is a subtree of T1.
A tree T2 is a subtree of T1 if there exists a node n in T1 such that the subtree of n is identical to T2. That is, if you cut off
the tree at node n, the two trees would be identical.

Solution 1: Time complexity: O(n + m). Space complexity: O(n + m), where n and m are the number of nodes in T1 and T2 respectively.
boolean containsTree(TreeNode t1, TreeNode t2) {
    StringBuilder sb1 = new StringBuilder();
    StringBuilder sb2 = new StringBuilder();
    preorder(t1, sb1);
    preorder(t2, sb2);
    return sb1.indexOf(sb2.toString()) != -1;
}
void preorder(TreeNode node, StringBuilder sb) {
    if (node == null) {
        sb.append("X");
        return;
    }
    sb.append(node.val + " ");
    preorder(node.left, sb);
    preorder(node.right, sb);
}

Solution 2: Time complexity: O(n + k * m). Space complexity: O(logn + logm), where k is the number of occurences of T2's root in T1.
memory usage can be a very big deal when it comes to scalability.
boolean containsTree(TreeNode t1, TreeNode t2) {
    if (t2 == null) {
        return true;
    }
    return subtree(t1, t2);
}
boolean subtree(TreeNode t1, TreeNode t2) {
    if (t1 == null) {
        return false;
    }
    if (t1.val == t2.val && matchTree(t1, t2)) {
        return true;
    }
    return subtree(t1.left, t2) || subtree(t1.right, t2);
}
boolean matchTree(TreeNode t1, TreeNode t2) {
    if (t1 == null && t2 == null) {
        return true;
    }
    if (t1 == null || t2 == null || t1.val != t2.val) {
        return false;
    }
    return matchTree(t1.left, t2.left) && matchTree(t1.right, t2.right);
}
