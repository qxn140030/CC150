Given a directed graph, design an algorithm to find out whether there is a route between two nodes.

mark any node  found in the course as "already visited" to avoid cycles and repetition of the nodes. BFS:
enum State {
     Unvisited, Visted, Visiting;
}
boolean search(Graph g, Node start, Node end) {
    if (start == end) {
        return true;
    }
    Queue<Node> q = new LinkedList<Node>();
    for (Node u : g.getNodes()) {
        u.state = State.Unvisited;
    }
    start.state = State.Visiting;
    q.add(start);
    Node u;
    while (!q.isEmpty()) {
        u = q.remove();
        if (u != null) {
            for (Node v : u.getAdjacent()) {
                if (v.state == State.Unvisited) {
                    if (v == end) {
                        return true;
                    }
                    v.state = State.Visiting;
                    q.add(v);
                }
            }
            u.state = State.Visited;
        }
    }
    return false;
}
