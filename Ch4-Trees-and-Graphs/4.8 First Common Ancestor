Design an algorithm and write code to find the first common ancestor of two nodes in a binary tree. Avoid storing additional nodes in a 
data structure. Note: This is not necessarily a binary search tree.

Solution 1: with links to parents
Time complexity: O(h). h is the height of the deeper node.
TreeNode commonAncestor(TreeNode p, TreeNode q) {
    int diff = getDepth(p) - getDepth(q);
    TreeNode up = diff > 0 : q : p;
    TreeNode down = diff < 0 : p : q;
    down = goUp(down, Math.abs(diff));
    while (up != down && up != null && down != null) {
        up = up.parent;
        down = down.parent;
    }
    return up == null || down == null ? null : up;
}
TreeNode goUp(TreeNode p, int diff) {
    while (diff > 0 && p != null) {
        p = p.parent;
        diff--;
    }
    return p;
}
int getDepth(TreeNode p) {
    int depth = 0;
    while (p != null) {
        p = p.parent;
        depth++;
    }
    return depth;
}

Solution 2: with links to parents, better worst-case runtime.
Time complexity: O(n). n is the size of the subtree for the first common ancestor. in the worst case, n is the number of nodes in the
tree. each node in that subtree is searched once.
TreeNode commonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if (!cover(root, p) || !cover(root, q)) {      // check if either node is not in the tree.
        return null;
    }
    if (cover(p, q)) {                             // or if one covers the other.
        return p;
    }
    if (cover(q, p)) {
        return q;
    }
    TreeNode sibling = getSibling(p);
    TreeNode parent = p.parent;
    while (!cover(sibling, q)) {
        sibling = getSibling(parent);
        parent = parent.parent;
    }
}
TreeNode getSibling(TreeNode p) {
    if (p == null || p.parent == null) {
        return null;
    }
    TreeNode parent = p.parent;
    return p == parent.left ? parent.right : parent.left;
}
boolean cover(TreeNode root, p) {
    if (root == null) {
        return false;
    }
    if (root == p) {
        return true;
    }
    return cover(root.left, p) || cover(root.right, p);
}

Solution 3:
TreeNode commonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if (root == null || root == p || root == q) {
        return root;
    }
    TreeNode left = commonAncestor(root.left, p, q);
    TreeNode right = commonAncestor(root.right, p, q);
    if (left == null) {
        return right;
    }
    if (right == null) {
        return left;
    }
    return root;
}
