Question: Describe how you could use a single array to implement three stacks.

Solution 1: Fixed Division. divide the array in three equal parts.
class FixedMultiStack {
  private int numberOfStacks = 3;
  private int stackCapacity;
  private int[] values;
  private int[] sizes;
  public FixedMultiStack(int stackCapacity) {
    this.stackCapacity = stackCapacity;
    values = new int[stackCapacity * numberOfStacks];
    sizes = new int[numberOfStacks];
  }
  public void push(int stackNum, int value) throws FullStackException {
    if (isFull(stackNum)) {
      throw new FullStackException();
    }
    sizes[stackNum]++;
    values[indexOfTop(stackNum)] = value;
  }
  public boolean isFull(int stackNum) {
    return sizes[stackNum] == stackCapacity;
  }
  public int indexOfTop(int stackNum) {
    int offset = stackNum * stackCapacity;
    int size = sizes[stackNum];
    return offset + size - 1;
  }
  public int pop(int stackNum) {
    if (isEmpty(stackNum)) {
      throw new EmptyStackException();
    }
    int topIndex = indexOfTop(stackNum);
    int value = values[topIndex];
    values[topIndex] = 0;
    sizes[stackNum]--;
    return value;
  }
  public boolean isEmpty(int stackNum) {
    return sizes[stackNum] == 0;
  }
  public int peek(int stackNum) {
    if (isEmpty(stackNum)) {
      throw new EmptyStackException();
    }
    return values[indexOfTop(stackNum)];
  }
}

Solution 2: Flexible DIvisions.[to be continued...]
