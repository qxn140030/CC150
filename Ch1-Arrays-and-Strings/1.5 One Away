Question: There are three types of edits that can be performed on strings: insert a character, remove a character, or replace a character.
          Given two strings, write a function to check if they are one edit (or zero edits) away.
          
Example: pale, ple -> true
         pales, pale -> true
         pale, bale -> true
         pale, bae -> false
        
public boolean oneEdit(String s1, String s2) {
	if (Math.abs(s1.length() - s2.length()) > 1) {
		return false;
	}
	if (s1.length() == s2.length()) {
		return oneReplace(s1, s2);
	}
	if (s1.length() > s2.length()) {
		return oneInsert(s1, s2);
	} else {
		return oneInsert(s2, s1);
	}
}
private boolean oneReplace(String s1, String s2) {
	boolean flag = false;
	for (int i = 0; i < s1.length(); i++) {
		if (s1.charAt(i) != s2.charAt(i)) {
			if (flag) {
				return false;
			}
			flag = true;
		}
	}
	return true;
}
// s1 is the string with longer length.
private boolean oneInsert(String s1, String s2) {
	int index2 = 0;
	boolean flag = false;
	for (int i = 0; i < s1.length(); i++) {
		if (s1.charAt(i) == s2.charAt(index2)) {
			index2++;
		} else {
			if (flag) {
				return false;
			}
			flag = true;
		}
	}
	return true;
}

the code for oneReplace is very similar to that for oneInsert, so merge them into one method.
more compact and remove duplcate code (which can facilitate maintainability).
public boolean oneEdit(String s1, String s2) {
	if (Math.abs(s1.length() - s2.length()) > 1) {
		return false;
	}
	if (s1.length() > s2.length()) {
		return oneDistance(s1, s2);
	} else {
		return oneDistance(s2, s1);
	}
}
private boolean oneDistance(String s1, String s2) {
	int index2 = 0;
	boolean flag = false;
	for (int i = 0; i < s1.length(); i++) {
		if (s1.charAt(i) == s2.charAt(index2)) {
			index2++;
		} else {
			if (flag) {
				return false;
			}
			if (s1.length() == s2.length()) {
				index2++;
			}
			flag = true;
		}
	}
	return true;
}
